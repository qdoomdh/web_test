"""
Django settings for web_test project.

Generated by 'django-admin startproject' using Django 2.0.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
DJANGO_MODE= os.getenv('DJANGO_MODE', "Production").lower()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = 'kz&558-654v+sdcycnft5knxkqz++r5m^=92@4qcb^=4+96te-' me make command
SECRET_KEY = os.getenv('SECRET_KEY')
# SECURITY WARNING: don't run with debug turned on in production!
if DJANGO_MODE == 'local':
    DEBUG = True
else:
    DEBUG = False

#ALLOWED_HOSTS = [] #myself make this command
ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS').split(',')
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.humanize', #this work for humanize: shows number under 10 as word and over as number
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #'debug_toolbar',# move to the if statement
    'books',
]
if DJANGO_MODE == 'local':
    INSTALLED_APPS +=(
        'debug_toolbar',
    )

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
]
if DJANGO_MODE == 'local':

    MIDDLEWARE +=(
        'debug_toolbar.middleware.DebugToolbarMiddleware',
    )
    
ROOT_URLCONF = 'web_test.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'web_test', 'template')], #use for templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'web_test.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases
if DJANGO_MODE == 'local':  #for use sqllight only on local mode
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }
elif DJANGO_MODE == 'staging':  #for use for postgresql  on staging mode
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2', # for using posgresql
            'NAME': os.getenv('DB_NAME'),
			'USER': os.getenv('DB_USER'),
			'PASSWORD': os.getenv('DB_PASSWORD'),
			'HOST': os.getenv('DB_HOST','127.0.0.1'),
			'PORT': os.getenv('DB_PORT','5432'),
        }
    }
elif DJANGO_MODE == 'production':  #for use for postgresql  on production mode
    import dj_database_url  #use dj_database_url to handle enviroment for heroku
    #Handles DATABASE_URL enviroment variable
    DATABASES = {'default': dj_database_url.config() } #set our database default and call dj_database_url
# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = 'staticfiles' # collect all static files in one place for production,in root folder
INTERNAL_IPS = ['127.0.0.1', ]

STATICFILES_DIRS=[
    os.path.join(BASE_DIR, "web_test", "static"),
]
SILKY_META = True
#Auth
LOGIN_URL = '/login/'
# LOGGING
# See: https://docs.djangoproject.com/en/dev/ref/settings/#logging
# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.

LOGGING = {
	'version': 1,
	'disable_existing_loggers': False,
	'filters': {
		'require_debug_false': {
			'()': 'django.utils.log.RequireDebugFalse'
		}
	},
	'handlers': {
		'mail_admins': {
			'level': 'ERROR',
			'filters': ['require_debug_false'],
			'class': 'django.utils.log.AdminEmailHandler'
		}
	},
	'loggers': {
		'django.request': {
			'handlers': ['mail_admins'],
			'level': 'ERROR',
			'propagate': True,
		},
	}
}
#Admin
ADMINS = [
    ('Mr.ebi', 'softwareqdoo@yahoo.com'),
    ('Mr. qdoo', 'qdoomd@yahoo.com')
]
if DJANGO_MODE == 'production':
    EMAIL_HOSTS = 'smtp.sendgrid.net'
    EMAIL_HOSTS_USER = os.getenv('SENDGRID_USERNAME')
    EMAIL_HOSTS_PASSWORD = os.getenv('SENDGRID_PASSWORD')
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True